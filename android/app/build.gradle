plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    //! The Firebase services is applied conditionally based on the presence of a valid google-services.json file in the next step.
    // id 'com.google.gms.google-services' 
    // END: FlutterFire Configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

// Check if google-services.json contains placeholder text
def googleServicesFile = file("google-services.json")
def shouldUseGoogleServices = false

if (googleServicesFile.exists()) {
    def fileContent = googleServicesFile.text
    if (!fileContent.contains("<THIS_IS_AUTOGENERATED>")) {
        shouldUseGoogleServices = true
    } else {
        println("Skipping Google Services - placeholder file detected")
    }
}

// Only apply plugin if it's a real config file
if (shouldUseGoogleServices) {
    apply plugin: 'com.google.gms.google-services'
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace 'com.komodoplatform.atomicdex'

    compileSdk 35
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.komodoplatform.atomicdex"
        minSdkVersion 28
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    // Android NDK releases page: https://developer.android.com/ndk/downloads
    ndkVersion = android.ndkVersion

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

