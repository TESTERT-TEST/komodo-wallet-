name: "Generates assets"
description: "Runs the flutter build command to transform and generate assets for the deployment build"

inputs:
  GITHUB_TOKEN:
    description: "The GitHub API public readonly token"
    required: true
  BUILD_COMMAND:
    description: "The flutter build command to run to generate assets for the deployment build"
    required: false
    default: "flutter build web --no-pub --release"

  # Optional Trello feedback provider configuration
  TRELLO_API_KEY:
    description: "Trello API key for feedback service"
    required: false
    default: ""
  TRELLO_TOKEN:
    description: "Trello token for feedback service"
    required: false
    default: ""
  TRELLO_BOARD_ID:
    description: "Trello board ID for feedback service"
    required: false
    default: ""
  TRELLO_LIST_ID:
    description: "Trello list ID for feedback service"
    required: false
    default: ""

  # Optional Cloudflare feedback provider configuration
  FEEDBACK_API_KEY:
    description: "API key for Cloudflare feedback service"
    required: false
    default: ""
  FEEDBACK_PRODUCTION_URL:
    description: "Production URL for Cloudflare feedback service"
    required: false
    default: ""
  FEEDBACK_TEST_URL:
    description: "Test URL for Cloudflare feedback service (debug mode)"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Determine commit hash
      shell: bash
      run: |
        echo "Determining commit hash..."
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          # For PRs, use the HEAD of the feature branch
          PR_SHA=$(jq -r .pull_request.head.sha "$GITHUB_EVENT_PATH")
          COMMIT_HASH=${PR_SHA:0:7}
          echo "Detected pull_request event. Using PR HEAD SHA: $COMMIT_HASH"
        else
          # Otherwise use the current checked-out HEAD
          COMMIT_HASH=$(git rev-parse --short HEAD | cut -c1-7)
          echo "Using git HEAD SHA: $COMMIT_HASH"
        fi
        # Export for subsequent steps
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
    - name: Fetch packages and generate assets
      shell: bash
      env:
        GITHUB_API_PUBLIC_READONLY_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        TRELLO_API_KEY: ${{ inputs.TRELLO_API_KEY }}
        TRELLO_TOKEN: ${{ inputs.TRELLO_TOKEN }}
        TRELLO_BOARD_ID: ${{ inputs.TRELLO_BOARD_ID }}
        TRELLO_LIST_ID: ${{ inputs.TRELLO_LIST_ID }}
        FEEDBACK_API_KEY: ${{ inputs.FEEDBACK_API_KEY }}
        FEEDBACK_PRODUCTION_URL: ${{ inputs.FEEDBACK_PRODUCTION_URL }}
        FEEDBACK_TEST_URL: ${{ inputs.FEEDBACK_TEST_URL }}
      run: |
        echo "Running \`flutter build\` to generate assets for the deployment build"

        if [ -n "$GITHUB_API_PUBLIC_READONLY_TOKEN" ]; then
          echo "GITHUB_TOKEN provided, running flutter build with token"
        else
          echo "GITHUB_TOKEN not provided or empty, running flutter build without token"
          unset GITHUB_API_PUBLIC_READONLY_TOKEN
        fi

        # Now COMMIT_HASH comes from the previous step, not recalculated here.

        # Prepare build command with feedback service credentials
        BUILD_CMD="${{ inputs.BUILD_COMMAND }}"

        # Add commit hash to build command
        BUILD_CMD="$BUILD_CMD --dart-define=COMMIT_HASH=$COMMIT_HASH"

        # Check and add the shared Trello board and list IDs if they are available
        HAVE_TRELLO_IDS=false
        if [ -n "$TRELLO_BOARD_ID" ] && [ -n "$TRELLO_LIST_ID" ]; then
          HAVE_TRELLO_IDS=true
          # Add these shared IDs to the build command
          BUILD_CMD="$BUILD_CMD --dart-define=TRELLO_BOARD_ID=$TRELLO_BOARD_ID"
          BUILD_CMD="$BUILD_CMD --dart-define=TRELLO_LIST_ID=$TRELLO_LIST_ID"
        fi

        # Add Trello feedback service variables if ALL required values are provided
        if [ "$HAVE_TRELLO_IDS" = true ] && [ -n "$TRELLO_API_KEY" ] && [ -n "$TRELLO_TOKEN" ]; then
          echo "Adding Trello feedback service configuration"
          BUILD_CMD="$BUILD_CMD --dart-define=TRELLO_API_KEY=$TRELLO_API_KEY"
          BUILD_CMD="$BUILD_CMD --dart-define=TRELLO_TOKEN=$TRELLO_TOKEN"
        else
          # If any Trello credential is missing, log a message but continue the build
          if [ -n "$TRELLO_API_KEY" ] || [ -n "$TRELLO_TOKEN" ] || [ -n "$TRELLO_BOARD_ID" ] || [ -n "$TRELLO_LIST_ID" ]; then
            echo "Warning: Incomplete Trello credentials provided. All Trello credentials must be present to include them in the build."
          fi
        fi

        # Add Cloudflare feedback service variables if ALL required values are provided
        # Note: Cloudflare also needs the Trello board and list IDs to be available
        if [ "$HAVE_TRELLO_IDS" = true ] && [ -n "$FEEDBACK_API_KEY" ] && [ -n "$FEEDBACK_PRODUCTION_URL" ] && [ -n "$FEEDBACK_TEST_URL" ]; then
          echo "Adding Cloudflare feedback service configuration"
          BUILD_CMD="$BUILD_CMD --dart-define=FEEDBACK_API_KEY=$FEEDBACK_API_KEY"
          BUILD_CMD="$BUILD_CMD --dart-define=FEEDBACK_PRODUCTION_URL=$FEEDBACK_PRODUCTION_URL"
          BUILD_CMD="$BUILD_CMD --dart-define=FEEDBACK_TEST_URL=$FEEDBACK_TEST_URL"
        else
          # If any Cloudflare credential is missing, log a message but continue the build
          if [ -n "$FEEDBACK_API_KEY" ] || [ -n "$FEEDBACK_PRODUCTION_URL" ] || [ -n "$FEEDBACK_TEST_URL" ] || 
             ([ -n "$TRELLO_BOARD_ID" ] || [ -n "$TRELLO_LIST_ID" ]); then
            echo "Warning: Incomplete Cloudflare feedback credentials provided. All Cloudflare credentials and Trello board/list IDs must be present to include them in the build."
          fi
        fi

        # Run flutter build once to download coin icons and config files. 
        # This step is expected to "fail", since flutter build has to run again 
        # after the assets are downloaded to register them in AssetManifest.bin
        echo ""
        flutter pub get --enforce-lockfile > /dev/null 2>&1 || true
        $BUILD_CMD > /dev/null 2>&1 || true
        rm -rf build/*

        # Run flutter build and capture its output
        flutter pub get --enforce-lockfile
        echo "Running build command: $BUILD_CMD"
        set +e  # Don't exit immediately on error
        $BUILD_CMD
        exit_status=$?
        set -e  # Restore exit on error behavior

        # Check if the exit status is non-zero (indicating an error)
        if [ $exit_status -ne 0 ]; then
            echo "Flutter build exited with status $exit_status"
            exit $exit_status
        fi
        echo "Done fetching packages and generating assets"
